android {
    compileSdk Config.COMPILE_SDK

    defaultConfig {
        minSdk Config.MIN_SDK
        targetSdk Config.TARGET_SDK

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }
    buildTypes {
        staging {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    "$rootDir/app/proguard-rules.pro",
                    "$rootDir/app/proguard-rules-staging.pro"
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    "$rootDir/app/proguard-rules.pro"
        }
        setupApplicationBuildTypes(buildTypes)
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
        }
        debug {
            java.srcDirs = ['src/debug/java']
        }
        release {
            java.srcDirs = ['src/release/java']
        }
        staging {
            java.srcDirs = ['src/staging/java']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += ["-opt-in=kotlin.RequiresOptIn"]
    }
    kotlin {
        jvmToolchain(17)
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
        disable 'MissingTranslation', 'ExtraTranslation'
        xmlReport true
    }
    packagingOptions {
        resources {
            excludes += [
                "/META-INF/{AL2.0,LGPL2.1}",
            ]
        }
    }
}

def setupApplicationBuildTypes(buildTypes) {
    buildTypes.all { buildType ->
        if (project.plugins.hasPlugin("com.android.application")) {
            if (buildType.name == 'release') {
                buildType.shrinkResources true
            } else {
                buildType.applicationIdSuffix = ".${buildType.name}"
                buildType.versionNameSuffix = "-${buildType.name}"
            }
        }
    }
}

dependencies {
    // Libs
    debugImplementation(libs.ui.tooling)
    implementation(libs.fragment.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.bundles.defaultLibs)
    implementation platform(libs.androidx.compose.bom)

    // Tests
    testImplementation(libs.bundles.defaultTestLibs)
    testImplementation(libs.koin.test)
    testImplementation(libs.kotlin.test)
    testImplementation(libs.koin.test.junit4)
    testImplementation(libs.kotlin.test.junit)
    testImplementation(libs.turbine)
    testImplementation(libs.mockk)
    testImplementation(libs.mockk.android)

    // AndroidTests
    androidTestImplementation(libs.bundles.defaultAndroidTestLibs)
    androidTestImplementation platform(libs.androidx.compose.bom)
}
